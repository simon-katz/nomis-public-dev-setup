* TODO Search for TODOs and FIXMEs
* TODO Understand minor modes.
**  See `nomis-right-margin-mode`.
**  Compare with `fci-mode` and `whitespace-mode`.
**  Parameters?
**  Different ways of doing it?
* TODO Do you have other things that should be modes (like nomis-right-margin-mode)?
* DONE Report this bug in Emacs 24.3:
**  + What's happened to repetition of keyboard macros?
*** It used to do it once; now it repeats until error (I think).
**  + Done.  See https://groups.google.com/forum/#!search/emacs$20bug$20keyboard$20macro$2015126/gnu.emacs.bug/i2DKFcWfzfY/9QMePrbxpiQJ
* TODO Compiling
** Look into any compilation errors and warnings now, and do so when you make changes
** What about compiling these init files? And other ones you manually install?
*** Ah, Emacs uses a "newer" check to see if recompilation is needed.
**** This isn't going to work for you
* TODO Consider Emacs Prelude
** (or parts of it, like the project thing which allows grepping across a project)
* TODO Stuff from better-defaults:
   ;; (progn
   ;; 
   ;;   (global-set-key (kbd "M-/") 'hippie-expand)
   ;;   (global-set-key (kbd "C-x C-b") 'ibuffer)
   ;; 
   ;;   (global-set-key (kbd "C-s") 'isearch-forward-regexp)
   ;;   (global-set-key (kbd "C-r") 'isearch-backward-regexp)
   ;;   (global-set-key (kbd "C-M-s") 'isearch-forward)
   ;;   (global-set-key (kbd "C-M-r") 'isearch-backward)
   ;; 
   ;;   (setq x-select-enable-clipboard t
   ;;         x-select-enable-primary t
   ;;         save-interprogram-paste-before-kill t
   ;;         apropos-do-all t
   ;;         mouse-yank-at-point t
   ;;         save-place-file (concat user-emacs-directory "places")
   ;;         backup-directory-alist `(("." . ,(concat user-emacs-directory
   ;;                                                  "backups")))))
* TODO See "stuff-from-starter-kit-for-reference.el"
* TODO Need a command for adding `...` around things
  (Or `...'? `foo` vs `foo' in lisp-mode.) 
* TODO `nomis-nrepl-rearrange-string-into-lines`:
** Not available everywhere with C-c C-f. Is there a good reason?
** You want different behaviour from Clojure and everywhere else.
*** Not so: even within Clojure, doc strings and your HTML strings are different.
*** Maybe the command can see what mode is active? (I like this.)
*** Maybe C-c C-f should handle the difference by being bound to different commands for Clojure and other things? (I don't like this.)
* TODO Emacs 26 new things to look at if you remember
** New mode line constructs '%o' and '%q', and user option
'mode-line-percent-position'.  '%o' displays the "degree of travel" of
the window through the buffer.  Unlike the default '%p', this
percentage approaches 100% as the window approaches the end of the
buffer.  '%q' displays the percentage offsets of both the start and
the end of the window, e.g. "5-17%".  The new option
'mode-line-percent-position' makes it easier to switch between '%p',
'%P', and these new constructs.
** Emacs can now auto-save buffers to visited files in a more robust
manner via the new mode 'auto-save-visited-mode'.  Unlike
'auto-save-visited-file-name', this mode uses the normal saving
procedure and therefore obeys saving hooks.
'auto-save-visited-file-name' is now obsolete.
** Emacs 26.1 comes with Org v9.1.6.
See the file ORG-NEWS for user-visible changes in Org.
** hideshow mode got four key bindings that are analogous to outline
mode bindings: 'C-c @ C-a', 'C-c @ C-t', 'C-c @ C-d', and 'C-c @ C-e'.
** New Elisp data-structure library 'radix-tree'.
** New minor mode 'pixel-scroll-mode' provides smooth pixel-level scrolling.
** New function 'add-variable-watcher' can be used to call a function
when a symbol's value is changed.  This is used to implement the new
debugger command 'debug-on-variable-change'.
** Support for side windows is now official.  The display action
function 'display-buffer-in-side-window' will display its buffer in a
side window.  Functions for toggling all side windows on a frame,
changing and reversing the layout of side windows and returning the
main (major non-side) window of a frame are provided.  For details
consult the section "(elisp) Side Windows" in the ELisp manual.
** 'if-let' and 'when-let' now support binding lists as defined by the
SRFI-2 (Scheme Request for Implementation 2).
** New function 'add-variable-watcher' can be used to call a function
when a symbol's value is changed.  This is used to implement the new
debugger command 'debug-on-variable-change'.
